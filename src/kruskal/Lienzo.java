/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kruskal;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 *  
 */
public class Lienzo extends javax.swing.JPanel {

    /**
     * Creates new form Lienzo
     */
    Grafo grafo;
    ArrayList<Nodo> nodos;
    ArrayList<Arco> arcos;
    ArrayList<Arco> camino=new ArrayList<>();
    JLabel lb;
    
    Nodo selectNow=null;
    Nodo selectBef=null;
    boolean listo=false;
    int mx=0, my=0;
    public boolean modeNodo=true;
    
    public Lienzo(Grafo grafo, ArrayList<Nodo> nodos, ArrayList<Arco> arcos, JLabel lb) {
        this.grafo=grafo;
        this.nodos=nodos;
        this.arcos=arcos;
        this.lb=lb;
        initComponents();

        
        Nodo A=new Nodo("A",50,200);
        nodos.add(A);
        grafo.ingresarNodo(A);        
        Nodo B=new Nodo("B",150,150);
        nodos.add(B);
        grafo.ingresarNodo(B);        
        Nodo C=new Nodo("C",300,250);
        nodos.add(C);
        grafo.ingresarNodo(C);        
        Nodo D=new Nodo("D",150,350);
        nodos.add(D);
        grafo.ingresarNodo(D);        
        Nodo E=new Nodo("E",50,300);
        nodos.add(E);
        grafo.ingresarNodo(E);
    
        Arco arc=new Arco(A,B,5);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);            
    arc=new Arco(B,C,10);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
    arc=new Arco(C,D,4);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
    arc=new Arco(D,E,8);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
    arc=new Arco(E,A,10);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
    arc=new Arco(A,C,8);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
    arc=new Arco(E,C,7);
            arcos.add(arc);
            A.agregarArco(arc);
            B.agregarArco(arc);
            grafo.adicionarEnlace(arc);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MouseMoved(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                KeyTyped(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseClicked
        // TODO add your handling code here:
      
        this.setFocusable(true);
        this.requestFocusInWindow();
        
        selectNow=selected(evt);
        if (selectNow!=null) {
            lb.setText("Nodo Seleccionado : "+selectNow.nombre);
        }
        if (evt.getClickCount()==1 && !modeNodo) {
            newArco(evt);
        }else{
            if (evt.getClickCount()==2 && modeNodo) {
                newNodo(evt);
            }
        }
        repaint();
    }//GEN-LAST:event_MouseClicked
    
    public Nodo selected(java.awt.event.MouseEvent evt){
        for (Nodo n : nodos) {
            if (n.mouseEntered(evt)) {
               return n;
            }
        }
        return null;
    }
    
    public void newArco(java.awt.event.MouseEvent evt){
        Nodo select=selected(evt);
        if (selectBef==null) {
            selectBef=select;
        }else{
            selectNow=select;
            if (selectNow!=null && select!=selectBef) {
                boolean sw=false, sw2=false;
                String ms="Ingresar peso de Arco:";
                float peso=1000000000;
                try{
                    do {
                        sw=false;
                        
                        try {
                            String op= JOptionPane.showInputDialog(ms);
                            if (op!=null) {
                                peso=Float.parseFloat(op);
                                sw=true;
                                for (Arco a : arcos) {
                                    if ((a.inicio==selectBef && a.fin==selectNow) || (a.fin==selectBef && a.inicio==selectNow)) {
                                        a.peso=peso;
                                        System.out.println("finded");
                                        repaint();
                                    }
                                }
                            }else{
                                sw2=true;
                            }
                        } catch (Exception e) {
                            ms="Error! Ingrese un valor valido";
                            sw=false;
                        }
                    }while (!sw && !sw2);
                    if (!sw2) {
                        Arco a=new Arco(selectBef,selectNow,peso);
                        arcos.add(a);
                        selectBef.agregarArco(a);
                        selectNow.agregarArco(a);
                        grafo.adicionarEnlace(a);
                        selectBef=null;
                        selectNow=null;
                    }
                }catch(Exception e){
                }
            }
        }
    }
    
    public void newNodo(java.awt.event.MouseEvent evt){
       boolean sw=false;
       String ms="Ingresar etiqueta del nuevo nodo:";
       String name="";
       try{
           do {
                sw=false;
                name=JOptionPane.showInputDialog(ms);
                for (Nodo n : nodos) {
                    if (n.nombre.compareTo(name)==0) {
                        sw=true;
                    }
                }
                ms="Error! Ya existe un nodo con esa etiqueta";
            } while (sw);
            Nodo nodo=new Nodo(name,evt.getX(),evt.getY());
            nodos.add(nodo);
            grafo.ingresarNodo(nodo);
       }catch(Exception e){
       }
    }
    
    public void useKruskal(){
        camino= new ArrayList<>();
        camino=(new kruskal().aplicarKruskal(grafo)).arcos;
        repaint();
    }
    
    private void MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseDragged
        if (evt.getButton()==0 && modeNodo) {
            if (nodos.size()>0) {
                move(nodos,evt);
            }
        }
    }//GEN-LAST:event_MouseDragged

    private void MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseMoved
        // TODO add your handling code here:
        if (!modeNodo) {
            repaint();
            mx=evt.getX();
            my=evt.getY();
        }
    }//GEN-LAST:event_MouseMoved

    private void KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KeyPressed
        // TODO add your handling code here:
         //System.out.println("brrar");

    }//GEN-LAST:event_KeyPressed

    private void KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_KeyTyped
        // TODO add your handling code here:
        
        if (evt.getKeyChar()=='x' || evt.getKeyChar()=='X') {
            if (modeNodo && selectNow!=null) {
               borrarNodo();
            }else{
                System.out.println("Mode "+modeNodo);
                if (!modeNodo) {
                    System.out.println("try ");
                    borrarArco();
                }
            }
        }
        repaint();        
    }//GEN-LAST:event_KeyTyped
    
    public void borrarNodo(){       
        selectNow.arcos.clear();
        selectNow.camino.clear();
        for (int i = 0; i < arcos.size(); i++) {
            if (arcos.get(i).inicio==selectNow || arcos.get(i).fin==selectNow) {
                arcos.remove(arcos.get(i));
                i--;
            }
        }
        for (Nodo nodo : nodos) {
            for (Arco a : nodo.arcos) {
                if (a.inicio==selectNow || a.fin==selectNow) {
                    nodo.arcos.remove(a);
                }
                System.out.println("b");
            }
            for (Nodo c : nodo.camino) {
                if (c==selectNow) {
                    nodo.camino.remove(c);
                }
                System.out.println("c");
            }
        }
        nodos.remove(selectNow);
    }
    
    public void borrarArco(){
        System.out.println("trying");
        selectBef=null;
        selectNow=null;
        repaint();
    }
    
    private void move(ArrayList<Nodo> nodos, java.awt.event.MouseEvent evt){
        for (Nodo n : nodos) {
            if (n.mouseEntered(evt)) {
                n.x=evt.getX();
                n.y=evt.getY();
                repaint();
            }
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g); 
        g.setColor(Color.blue);
        g.clearRect(0, 0, 500, 500);
        pintarGrafo(g);
    }
    public void pintarGrafo(Graphics g){
        if (selectBef!=null) {
            g.setColor(Color.blue);
            g.drawLine(selectBef.x, selectBef.y, mx, my);
        }
        if (arcos.size()>0) {
            for (Arco a : arcos) {
                g.setColor(Color.blue);
                g.drawLine(a.inicio.x, a.inicio.y, a.fin.x, a.fin.y);
                int x= Math.min(a.inicio.x,a.fin.x)+ Math.abs((a.inicio.x- a.fin.x)/2);
                int y= Math.min(a.inicio.y,a.fin.y)+ Math.abs((a.inicio.y- a.fin.y)/2);
                char[] p=(""+(a.peso)).toCharArray();
                g.drawChars(p,0,p.length, x,y);
            }
        }                
        if (nodos.size()>0) {
            for (Nodo n : nodos) {
                g.setColor(Color.yellow);
                g.fillOval(n.x-(n.radio/2), n.y-(n.radio/2), n.radio,n.radio);
                g.setColor(Color.red);
                g.drawChars(n.nombre.toCharArray(),0, n.nombre.length(), n.x, n.y);
            }
        }
        if (camino.size()>0) {
            for (Arco c : camino) {
                g.setColor(Color.red);
                g.drawLine(c.inicio.x, c.inicio.y, c.fin.x, c.fin.y);
                int x= Math.min(c.inicio.x,c.fin.x)+ Math.abs((c.inicio.x- c.fin.x)/2);
                int y= Math.min(c.inicio.y,c.fin.y)+ Math.abs((c.inicio.y- c.fin.y)/2);
                char[] p=(""+(c.peso)).toCharArray();
                g.drawChars(p,0,p.length, x,y);
            }
        }
        
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
